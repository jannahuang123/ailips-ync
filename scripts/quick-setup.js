#!/usr/bin/env node

/**
 * LipSyncVideo.net Quick Setup Script
 * 
 * This script helps you quickly configure the basic infrastructure
 * for your LipSyncVideo.net application.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('🚀 LipSyncVideo.net Quick Setup Script');
console.log('=====================================\n');

// Check if we're in the right directory
if (!fs.existsSync('package.json')) {
  console.error('❌ Please run this script from the project root directory');
  process.exit(1);
}

// Check if required files exist
const requiredFiles = [
  'src/db/schema.ts',
  'src/db/config.ts',
  '.env.example'
];

for (const file of requiredFiles) {
  if (!fs.existsSync(file)) {
    console.error(`❌ Required file not found: ${file}`);
    process.exit(1);
  }
}

console.log('✅ Project structure validated\n');

// Function to prompt user for input
function prompt(question) {
  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    readline.question(question, (answer) => {
      readline.close();
      resolve(answer.trim());
    });
  });
}

// Function to generate random secret
function generateSecret() {
  return require('crypto').randomBytes(32).toString('base64');
}

// Main setup function
async function runSetup() {
  console.log('📋 Starting interactive setup...\n');

  // Step 1: Basic configuration
  console.log('🔧 Step 1: Basic Configuration');
  console.log('------------------------------');

  const projectName = await prompt('Project name (default: LipSyncVideo): ') || 'LipSyncVideo';
  const webUrl = await prompt('Web URL (default: http://localhost:3000): ') || 'http://localhost:3000';
  
  // Step 2: Database configuration
  console.log('\n🗄️  Step 2: Database Configuration');
  console.log('----------------------------------');
  
  console.log('Please create a Supabase project at https://supabase.com');
  const databaseUrl = await prompt('Supabase DATABASE_URL: ');
  const supabaseUrl = await prompt('Supabase Project URL: ');
  const supabaseAnonKey = await prompt('Supabase Anon Key: ');

  // Step 3: Authentication configuration
  console.log('\n🔐 Step 3: Authentication Configuration');
  console.log('--------------------------------------');
  
  console.log('Please create Google OAuth credentials at https://console.cloud.google.com');
  const googleClientId = await prompt('Google OAuth Client ID: ');
  const googleClientSecret = await prompt('Google OAuth Client Secret: ');

  // Step 4: Optional services
  console.log('\n🔑 Step 4: Optional External Services');
  console.log('------------------------------------');
  
  const heygenApiKey = await prompt('HeyGen API Key (optional, press Enter to skip): ');
  const stripePublicKey = await prompt('Stripe Public Key (optional, press Enter to skip): ');
  const stripePrivateKey = await prompt('Stripe Private Key (optional, press Enter to skip): ');

  // Generate .env.local file
  console.log('\n📝 Generating .env.local file...');

  const authSecret = generateSecret();
  const authUrl = `${webUrl}/api/auth`;

  const envContent = `# LipSyncVideo.net Environment Configuration
# Generated by quick-setup.js on ${new Date().toISOString()}

# ===========================================
# Basic Configuration
# ===========================================
NEXT_PUBLIC_WEB_URL="${webUrl}"
NEXT_PUBLIC_PROJECT_NAME="${projectName}"

# ===========================================
# Database Configuration (Supabase)
# ===========================================
DATABASE_URL="${databaseUrl}"
NEXT_PUBLIC_SUPABASE_URL="${supabaseUrl}"
NEXT_PUBLIC_SUPABASE_ANON_KEY="${supabaseAnonKey}"

# ===========================================
# Authentication Configuration
# ===========================================
AUTH_SECRET="${authSecret}"
AUTH_URL="${authUrl}"
AUTH_TRUST_HOST="true"

# Google OAuth
AUTH_GOOGLE_ID="${googleClientId}"
AUTH_GOOGLE_SECRET="${googleClientSecret}"
NEXT_PUBLIC_AUTH_GOOGLE_ID="${googleClientId}"
NEXT_PUBLIC_AUTH_GOOGLE_ENABLED="true"
NEXT_PUBLIC_AUTH_GOOGLE_ONE_TAP_ENABLED="true"

# GitHub OAuth (disabled by default)
AUTH_GITHUB_ID=""
AUTH_GITHUB_SECRET=""
NEXT_PUBLIC_AUTH_GITHUB_ENABLED="false"

# ===========================================
# AI Services Configuration
# ===========================================
# HeyGen API
HEYGEN_API_KEY="${heygenApiKey}"
HEYGEN_BASE_URL="https://api.heygen.com"

# APICore.ai (backup service)
APICORE_API_KEY=""
APICORE_BASE_URL="https://api.apicore.ai"
APICORE_VERSION="v1"

# D-ID API (backup service)
DID_API_KEY=""
DID_BASE_URL="https://api.d-id.com"

# ===========================================
# Payment Configuration (Stripe)
# ===========================================
STRIPE_PUBLIC_KEY="${stripePublicKey}"
STRIPE_PRIVATE_KEY="${stripePrivateKey}"
STRIPE_WEBHOOK_SECRET=""

# Payment URLs
NEXT_PUBLIC_PAY_SUCCESS_URL="${webUrl}/payment/success"
NEXT_PUBLIC_PAY_FAIL_URL="${webUrl}/payment/failed"
NEXT_PUBLIC_PAY_CANCEL_URL="${webUrl}/pricing"

# ===========================================
# File Processing Configuration
# ===========================================
# File upload limits (in bytes)
MAX_IMAGE_SIZE="10485760"          # 10MB
MAX_AUDIO_SIZE="52428800"          # 50MB
MAX_VIDEO_SIZE="104857600"         # 100MB

# Supported file formats
SUPPORTED_IMAGE_FORMATS="jpg,jpeg,png,webp,heic"
SUPPORTED_AUDIO_FORMATS="mp3,wav,m4a,ogg"
SUPPORTED_VIDEO_FORMATS="mp4,mov,webm"

# File processing settings
TEMP_FILE_RETENTION_HOURS="24"
MAX_CONCURRENT_UPLOADS="3"
ENABLE_VIRUS_SCAN="false"

# ===========================================
# LipSync Credits System
# ===========================================
# Credit consumption rates
CREDITS_PER_LIPSYNC_GENERATION="10"
CREDITS_PER_HD_EXPORT="5"
CREDITS_PER_4K_EXPORT="15"
FREE_TIER_MONTHLY_CREDITS="100"

# ===========================================
# Analytics and Monitoring
# ===========================================
# Google Analytics
NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=""

# OpenPanel Analytics
NEXT_PUBLIC_OPENPANEL_CLIENT_ID=""

# Sentry Error Tracking
SENTRY_DSN=""

# ===========================================
# Email Service Configuration
# ===========================================
# Resend Email Service
RESEND_API_KEY=""
EMAIL_FROM_ADDRESS="noreply@lipsyncvideo.net"
EMAIL_FROM_NAME="LipSyncVideo"

# ===========================================
# Admin Configuration
# ===========================================
ADMIN_EMAILS=""

# ===========================================
# Development Settings
# ===========================================
NEXT_PUBLIC_LOCALE_DETECTION="false"
NEXT_PUBLIC_DEFAULT_THEME="light"

# Security and Rate Limiting
API_RATE_LIMIT_PER_MINUTE="60"
API_RATE_LIMIT_PER_HOUR="1000"
CORS_ALLOWED_ORIGINS="${webUrl}"
ENABLE_CONTENT_MODERATION="false"
`;

  fs.writeFileSync('.env.local', envContent);
  console.log('✅ .env.local file created successfully');

  // Test database connection
  console.log('\n🧪 Testing database connection...');
  try {
    execSync('npm run db:studio --silent', { stdio: 'ignore', timeout: 5000 });
    console.log('✅ Database connection test passed');
  } catch (error) {
    console.log('⚠️  Database connection test failed - please check your DATABASE_URL');
  }

  // Install dependencies if needed
  console.log('\n📦 Checking dependencies...');
  try {
    execSync('npm list --depth=0 --silent', { stdio: 'ignore' });
    console.log('✅ Dependencies are installed');
  } catch (error) {
    console.log('📦 Installing dependencies...');
    execSync('npm install', { stdio: 'inherit' });
  }

  // Final instructions
  console.log('\n🎉 Setup completed successfully!');
  console.log('================================\n');

  console.log('📋 Next steps:');
  console.log('1. Review the generated .env.local file');
  console.log('2. Run database migrations: npm run db:migrate');
  console.log('3. Start the development server: npm run dev');
  console.log('4. Visit http://localhost:3000 to test your application');
  console.log('\n📚 For detailed configuration guides, check the docs/ directory:');
  console.log('- docs/VERCEL_DEPLOYMENT_GUIDE.md');
  console.log('- docs/SUPABASE_SETUP_GUIDE.md');
  console.log('- docs/AUTH_SETUP_GUIDE.md');
  console.log('- docs/EXTERNAL_SERVICES_SETUP.md');
  console.log('- docs/COMPLETE_SETUP_CHECKLIST.md');

  console.log('\n🚀 Happy coding with LipSyncVideo.net!');
}

// Run the setup
runSetup().catch((error) => {
  console.error('❌ Setup failed:', error.message);
  process.exit(1);
});
