# -----------------------------------------------------------------------------
# LipSyncVideo.net Development Environment Configuration
# 复制此文件为 .env.development 并填入实际值
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Web Information
# -----------------------------------------------------------------------------
NEXT_PUBLIC_WEB_URL="http://localhost:3000"
NEXT_PUBLIC_PROJECT_NAME="LipSyncVideo"

# -----------------------------------------------------------------------------
# Database with Supabase
# https://supabase.com/docs/guides/getting-started/quickstarts/nextjs
# 1. 访问 https://supabase.com/
# 2. 创建新项目
# 3. 在 Settings > Database 中获取连接字符串
# -----------------------------------------------------------------------------
DATABASE_URL="postgresql://postgres:[YOUR-PASSWORD]@db.[YOUR-PROJECT-REF].supabase.co:5432/postgres"

# -----------------------------------------------------------------------------
# Auth with next-auth
# https://authjs.dev/getting-started/installation?framework=Next.js
# -----------------------------------------------------------------------------
AUTH_SECRET="Zt3BXVudzzRq2R2WBqhwRy1dNMq48Gg9zKAYq7YwSL0="
AUTH_URL="http://localhost:3000/api/auth"
AUTH_TRUST_HOST=true

# Google Auth
# 1. 访问 https://console.cloud.google.com/
# 2. 创建项目或选择现有项目
# 3. 启用 Google+ API
# 4. 创建 OAuth 2.0 客户端 ID
# 5. 设置授权重定向 URI: http://localhost:3000/api/auth/callback/google
AUTH_GOOGLE_ID="your-google-client-id.apps.googleusercontent.com"
AUTH_GOOGLE_SECRET="your-google-client-secret"
NEXT_PUBLIC_AUTH_GOOGLE_ID="your-google-client-id.apps.googleusercontent.com"
NEXT_PUBLIC_AUTH_GOOGLE_ENABLED="true"
NEXT_PUBLIC_AUTH_GOOGLE_ONE_TAP_ENABLED="true"

# Github Auth (可选)
# 1. 访问 GitHub Settings > Developer settings > OAuth Apps
# 2. 创建新的 OAuth App
# 3. 设置回调 URL: http://localhost:3000/api/auth/callback/github
AUTH_GITHUB_ID="your-github-client-id"
AUTH_GITHUB_SECRET="your-github-client-secret"
NEXT_PUBLIC_AUTH_GITHUB_ENABLED="false"

# -----------------------------------------------------------------------------
# Payment with Stripe
# https://docs.stripe.com/keys
# 1. 访问 https://dashboard.stripe.com/
# 2. 获取测试密钥 (pk_test_ 和 sk_test_)
# 3. 创建 Webhook 端点: http://localhost:3000/api/stripe/webhook
# 4. 选择事件: checkout.session.completed, invoice.payment_succeeded, customer.subscription.deleted
# -----------------------------------------------------------------------------
STRIPE_PUBLIC_KEY="pk_test_your_stripe_public_key"
STRIPE_PRIVATE_KEY="sk_test_your_stripe_private_key"
STRIPE_WEBHOOK_SECRET="whsec_your_webhook_secret"

NEXT_PUBLIC_PAY_SUCCESS_URL="http://localhost:3000/dashboard"
NEXT_PUBLIC_PAY_FAIL_URL="http://localhost:3000/pricing"
NEXT_PUBLIC_PAY_CANCEL_URL="http://localhost:3000/pricing"

# -----------------------------------------------------------------------------
# Storage with AWS S3
# https://docs.aws.amazon.com/s3/index.html
# 1. 创建 AWS 账号并登录控制台
# 2. 创建 S3 存储桶 (例如: lipsyncvideo-storage)
# 3. 创建 IAM 用户并获取访问密钥
# 4. 配置存储桶 CORS 策略
# -----------------------------------------------------------------------------
STORAGE_ENDPOINT="https://s3.amazonaws.com"
STORAGE_REGION="us-east-1"
STORAGE_ACCESS_KEY="your-aws-access-key"
STORAGE_SECRET_KEY="your-aws-secret-key"
STORAGE_BUCKET="lipsyncvideo-storage"
STORAGE_DOMAIN="https://lipsyncvideo-storage.s3.amazonaws.com"

# -----------------------------------------------------------------------------
# AI Services for LipSync (新增)
# -----------------------------------------------------------------------------

# HeyGen API (主要 AI 服务)
# 1. 访问 https://app.heygen.com/
# 2. 注册账号并完成验证
# 3. 进入 API 设置页面获取密钥
HEYGEN_API_KEY="your-heygen-api-key"

# D-ID API (备选 AI 服务)
# 1. 访问 https://www.d-id.com/
# 2. 注册开发者账号
# 3. 获取 API 密钥
DID_API_KEY="your-did-api-key"

# -----------------------------------------------------------------------------
# Redis for Task Queue (新增)
# -----------------------------------------------------------------------------

# 本地 Redis (开发环境)
# macOS: brew install redis && brew services start redis
# Ubuntu: sudo apt install redis-server && sudo systemctl start redis-server
REDIS_HOST="localhost"
REDIS_PORT="6379"
REDIS_PASSWORD=""

# 云端 Redis (推荐生产环境)
# 1. 访问 https://upstash.com/ 或其他 Redis 云服务
# 2. 创建 Redis 数据库
# 3. 获取连接信息
# REDIS_HOST="your-redis-host"
# REDIS_PORT="6379"
# REDIS_PASSWORD="your-redis-password"

# -----------------------------------------------------------------------------
# Other Settings
# -----------------------------------------------------------------------------
NEXT_PUBLIC_LOCALE_DETECTION="false"
ADMIN_EMAILS="your-admin-email@example.com"
NEXT_PUBLIC_DEFAULT_THEME="light"

# Analytics (可选)
NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=""
NEXT_PUBLIC_OPENPANEL_CLIENT_ID=""

# Google Adsense (可选)
NEXT_PUBLIC_GOOGLE_ADCODE=""

# -----------------------------------------------------------------------------
# Development Only Settings
# -----------------------------------------------------------------------------

# 开发模式下的调试选项
NODE_ENV="development"
NEXT_PUBLIC_DEBUG="false"

# Webhook 测试 (使用 ngrok 等工具)
# WEBHOOK_BASE_URL="https://your-ngrok-url.ngrok.io"

# -----------------------------------------------------------------------------
# 配置完成检查清单
# -----------------------------------------------------------------------------
# [ ] DATABASE_URL - 数据库连接正常
# [ ] AUTH_GOOGLE_ID - Google 登录配置
# [ ] STRIPE_PUBLIC_KEY - Stripe 支付配置
# [ ] STORAGE_BUCKET - AWS S3 存储配置
# [ ] HEYGEN_API_KEY - HeyGen AI 服务配置
# [ ] REDIS_HOST - Redis 任务队列配置
# [ ] 运行 pnpm dev 项目正常启动
# [ ] 访问 http://localhost:3000 页面正常显示
